from http.server import BaseHTTPRequestHandler
import json
import os
import logging
import sys
import platform
import urllib.request
import urllib.parse
import time
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
logger.info(f"Python version: {python_version}")
logger.info(f"Platform: {platform.platform()}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    BOT_TOKEN = "7559539951:AAG3SL-275Z0-4M24MUrA5p7feNd-SW1py4"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω

logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {BOT_TOKEN[:8]}...")

# URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
VERCEL_URL = os.environ.get("VERCEL_URL") or "v0-kenga-bur-assistant.vercel.app"
if not VERCEL_URL.startswith(("http://", "https://")):
    VERCEL_URL = f"https://{VERCEL_URL}"

logger.info(f"URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞: {VERCEL_URL}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(Enum):
    START = 0
    DISTRICT_SELECTION = 1
    DEPTH_SELECTION = 2
    EQUIPMENT_SELECTION = 3
    SERVICES_SELECTION = 4
    FINAL_CALCULATION = 5

# –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–π–æ–Ω–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ JSON –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ –ë–î
# –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ lib/drilling-data.ts
DISTRICTS = [
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë–∞–ª–∞—à–∏—Ö–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—Ä–æ–Ω–Ω–∏—Ü—ã",
    "–í–∏–¥–Ω–æ–µ",
    "–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω"
]

# –ì–ª—É–±–∏–Ω—ã –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
DISTRICT_DEPTHS = {
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": [40, 50, 60, 70, 80, 90, 100],
    "–ë–∞–ª–∞—à–∏—Ö–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [15, 20, 25, 30, 35, 40],
    "–ë—Ä–æ–Ω–Ω–∏—Ü—ã": [45, 50, 55, 60, 65],
    "–í–∏–¥–Ω–æ–µ": [20, 25, 30],
    "–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–∏–π —Ä–∞–π–æ–Ω": [30, 35, 40, 45, 50, 55, 60],
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [35, 40, 45, 50, 55, 60],
    "–î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": [30, 40, 50, 70, 80, 90, 100],
    "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": [25, 30, 35, 40, 45, 50, 60, 70, 80, 90]
}

# –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—ã
EQUIPMENT = {
    "–°–∫–≤–∞–∂–∏–Ω–Ω—ã–π –Ω–∞—Å–æ—Å Belamos tf 80-110": 25000,
    "–ù–∞—Å–æ—Å Grundfos SQ 3-65": 45000,
    "–ö–µ—Å—Å–æ–Ω –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π": 35000,
    "–ì–∏–¥—Ä–æ–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä 50 –ª": 6000,
    "–û–≥–æ–ª–æ–≤–æ–∫ —Å–∫–≤–∞–∂–∏–Ω—ã": 3500,
    "–§–∏–ª—å—Ç—Ä –≥—Ä—É–±–æ–π –æ—á–∏—Å—Ç–∫–∏": 3000
}

# –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã
SERVICES = {
    "–ú–æ–Ω—Ç–∞–∂ –∫–µ—Å—Å–æ–Ω–∞": 19000,
    "–ú–æ–Ω—Ç–∞–∂ —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏": 2000,
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": 3000,
    "–ê–Ω–∞–ª–∏–∑ –≤–æ–¥—ã": 5000,
    "–ú–æ–Ω—Ç–∞–∂ –≥–∏–¥—Ä–æ–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞": 2900
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥—É—é –ë–î
user_states = {}

# –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è –∑–∞ –º–µ—Ç—Ä
BASE_DRILLING_COST = 2900

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Telegram Bot API
def telegram_api_request(method, data=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/{method}"
    
    if data:
        data = json.dumps(data).encode('utf-8')
        headers = {'Content-Type': 'application/json'}
    else:
        data = None
        headers = {}
    
    req = urllib.request.Request(url, data=data, headers=headers)
    
    try:
        with urllib.request.urlopen(req) as response:
            return json.loads(response.read().decode('utf-8'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Telegram API: {e}")
        return {"ok": False, "error": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–∞–π–æ–Ω–∞–º–∏
def create_districts_keyboard():
    keyboard = []
    row = []
    
    for i, district in enumerate(DISTRICTS, 1):
        row.append({"text": district, "callback_data": f"district_{district}"})
        
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 2 == 0 or i == len(DISTRICTS):
            keyboard.append(row)
            row = []
    
    return {"inline_keyboard": keyboard}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª—É–±–∏–Ω–∞–º–∏
def create_depths_keyboard(district):
    depths = DISTRICT_DEPTHS.get(district, [30, 40, 50])
    keyboard = []
    row = []
    
    for i, depth in enumerate(depths, 1):
        row.append({"text": f"{depth} –º", "callback_data": f"depth_{depth}"})
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if i % 3 == 0 or i == len(depths):
            keyboard.append(row)
            row = []
    
    return {"inline_keyboard": keyboard}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
def create_equipment_keyboard(selected_equipment=None):
    if selected_equipment is None:
        selected_equipment = []
    
    keyboard = []
    for equip, price in EQUIPMENT.items():
        prefix = "‚úÖ " if equip in selected_equipment else ""
        keyboard.append([{
            "text": f"{prefix}{equip} - {price} —Ä—É–±.",
            "callback_data": f"equipment_{equip}"
        }])
    
    keyboard.append([{"text": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "callback_data": "equipment_done"}])
    return {"inline_keyboard": keyboard}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—Å–ª—É–≥–∞–º–∏
def create_services_keyboard(selected_services=None):
    if selected_services is None:
        selected_services = []
    
    keyboard = []
    for service, price in SERVICES.items():
        prefix = "‚úÖ " if service in selected_services else ""
        keyboard.append([{
            "text": f"{prefix}{service} - {price} —Ä—É–±.",
            "callback_data": f"service_{service}"
        }])
    
    keyboard.append([{"text": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä —É—Å–ª—É–≥", "callback_data": "services_done"}])
    return {"inline_keyboard": keyboard}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è
def calculate_drilling_cost(district, depth):
    return depth * BASE_DRILLING_COST

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_total_cost(district, depth, selected_equipment, selected_services):
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è
    drilling_cost = calculate_drilling_cost(district, depth)
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_cost = sum(EQUIPMENT.get(item, 0) for item in selected_equipment)
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥
    services_cost = sum(SERVICES.get(item, 0) for item in selected_services)
    
    return drilling_cost + equipment_cost + services_cost

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º
def create_final_message(user_data):
    district = user_data.get('district', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    depth = user_data.get('depth', 0)
    selected_equipment = user_data.get('selected_equipment', [])
    selected_services = user_data.get('selected_services', [])
    
    drilling_cost = calculate_drilling_cost(district, depth)
    equipment_cost = sum(EQUIPMENT.get(item, 0) for item in selected_equipment)
    services_cost = sum(SERVICES.get(item, 0) for item in selected_services)
    total_cost = drilling_cost + equipment_cost + services_cost
    
    message = f"üìã *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è*\n\n"
    message += f"üè° *–†–∞–π–æ–Ω:* {district}\n"
    message += f"üìè *–ì–ª—É–±–∏–Ω–∞:* {depth} –º\n\n"
    
    message += f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:* {drilling_cost} —Ä—É–±.\n\n"
    
    if selected_equipment:
        message += f"üîß *–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:*\n"
        for item in selected_equipment:
            price = EQUIPMENT.get(item, 0)
            message += f"‚Ä¢ {item} - {price} —Ä—É–±.\n"
        message += f"*–ò—Ç–æ–≥–æ –∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {equipment_cost} —Ä—É–±.\n\n"
    
    if selected_services:
        message += f"üõ† *–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n"
        for item in selected_services:
            price = SERVICES.get(item, 0)
            message += f"‚Ä¢ {item} - {price} —Ä—É–±.\n"
        message += f"*–ò—Ç–æ–≥–æ –∑–∞ —É—Å–ª—É–≥–∏:* {services_cost} —Ä—É–±.\n\n"
    
    message += f"*–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost} —Ä—É–±.*"
    
    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    webhook_url = f"{VERCEL_URL}/api/simple-webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –∞–¥—Ä–µ—Å: {webhook_url}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
    delete_result = telegram_api_request("deleteWebhook")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {delete_result}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    set_result = telegram_api_request("setWebhook", {"url": webhook_url})
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {set_result}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    webhook_info = telegram_api_request("getWebhookInfo")
    logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ: {webhook_info}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_result = telegram_api_request("sendMessage", {
        "chat_id": 5186134402,
        "text": f"–í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}\n–í–µ—Ä—Å–∏—è Python: {python_version}"
    })
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_result}")
    
    return {
        "success": set_result.get("ok", False),
        "webhook_url": webhook_url,
        "webhook_info": webhook_info.get("result", {}),
        "test_message": message_result.get("ok", False),
        "python_version": python_version
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
def process_update(update_data):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if 'callback_query' in update_data:
        return process_callback_query(update_data['callback_query'])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    elif 'message' in update_data and 'text' in update_data['message']:
        return process_message(update_data['message'])
    
    return {"ok": True}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def process_message(message):
    chat_id = message['chat']['id']
    text = message['text']
    user_id = str(message['from']['id'])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_states:
        user_states[user_id] = {
            'state': UserState.START.value,
            'district': None,
            'depth': None,
            'selected_equipment': [],
            'selected_services': [],
            'timestamp': time.time()
        }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text == '/start':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'state': UserState.DISTRICT_SELECTION.value,
            'district': None,
            'depth': None,
            'selected_equipment': [],
            'selected_services': [],
            'timestamp': time.time()
        }
        
        telegram_api_request("sendMessage", {
            "chat_id": chat_id,
            "text": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –±—É—Ä–µ–Ω–∏–µ:",
            "reply_markup": create_districts_keyboard()
        })
    
    elif text == '/help':
        telegram_api_request("sendMessage", {
            "chat_id": chat_id,
            "text": "üîπ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*:\n\n"
                   "/start - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è\n"
                   "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                   "üîπ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è*:\n\n"
                   "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω\n"
                   "2. –£–∫–∞–∂–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è\n"
                   "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
                   "4. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
                   "5. –ü–æ–ª—É—á–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n"
                   "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            "parse_mode": "Markdown"
        })
    
    elif text == '/reset':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'state': UserState.START.value,
            'district': None,
            'depth': None,
            'selected_equipment': [],
            'selected_services': [],
            'timestamp': time.time()
        }
        
        telegram_api_request("sendMessage", {
            "chat_id": chat_id,
            "text": "üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç."
        })
    
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        telegram_api_request("sendMessage", {
            "chat_id": chat_id,
            "text": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        })
    
    return {"ok": True}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def process_callback_query(callback_query):
    user_id = str(callback_query['from']['id'])
    chat_id = callback_query['message']['chat']['id']
    message_id = callback_query['message']['message_id']
    callback_data = callback_query['data']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_states:
        user_states[user_id] = {
            'state': UserState.START.value,
            'district': None,
            'depth': None,
            'selected_equipment': [],
            'selected_services': [],
            'timestamp': time.time()
        }
    
    user_data = user_states[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    telegram_api_request("answerCallbackQuery", {
        "callback_query_id": callback_query['id']
    })
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
    if callback_data.startswith('district_'):
        district = callback_data.replace('district_', '')
        user_data['district'] = district
        user_data['state'] = UserState.DEPTH_SELECTION.value
        
        telegram_api_request("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": f"üè° –í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω: *{district}*\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è:",
            "parse_mode": "Markdown",
            "reply_markup": create_depths_keyboard(district)
        })
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–ª—É–±–∏–Ω—ã
    elif callback_data.startswith('depth_'):
        depth = int(callback_data.replace('depth_', ''))
        user_data['depth'] = depth
        user_data['state'] = UserState.EQUIPMENT_SELECTION.value
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è
        drilling_cost = calculate_drilling_cost(user_data['district'], depth)
        
        telegram_api_request("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": f"üìè –í—ã–±—Ä–∞–Ω–∞ –≥–ª—É–±–∏–Ω–∞: *{depth} –º*\n\n"
                   f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è: *{drilling_cost} —Ä—É–±.*\n\n"
                   f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:",
            "parse_mode": "Markdown",
            "reply_markup": create_equipment_keyboard(user_data.get('selected_equipment', []))
        })
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    elif callback_data.startswith('equipment_'):
        if callback_data == 'equipment_done':
            user_data['state'] = UserState.SERVICES_SELECTION.value
            
            telegram_api_request("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": "üîß –í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:",
                "reply_markup": create_services_keyboard(user_data.get('selected_services', []))
            })
        else:
            equipment_item = callback_data.replace('equipment_', '')
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º)
            if 'selected_equipment' not in user_data:
                user_data['selected_equipment'] = []
                
            if equipment_item in user_data['selected_equipment']:
                user_data['selected_equipment'].remove(equipment_item)
            else:
                user_data['selected_equipment'].append(equipment_item)
            
            drilling_cost = calculate_drilling_cost(user_data['district'], user_data['depth'])
            equipment_cost = sum(EQUIPMENT.get(item, 0) for item in user_data['selected_equipment'])
            
            telegram_api_request("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": f"üìè –ì–ª—É–±–∏–Ω–∞: *{user_data['depth']} –º*\n"
                       f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è: *{drilling_cost} —Ä—É–±.*\n"
                       f"üîß –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: *{equipment_cost} —Ä—É–±.*\n\n"
                       f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:",
                "parse_mode": "Markdown",
                "reply_markup": create_equipment_keyboard(user_data['selected_equipment'])
            })
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
    elif callback_data.startswith('service_'):
        if callback_data == 'services_done':
            user_data['state'] = UserState.FINAL_CALCULATION.value
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = create_final_message(user_data)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîÑ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", "callback_data": "new_calculation"}]
                ]
            }
            
            telegram_api_request("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": final_message,
                "parse_mode": "Markdown",
                "reply_markup": keyboard
            })
        else:
            service_item = callback_data.replace('service_', '')
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º)
            if 'selected_services' not in user_data:
                user_data['selected_services'] = []
                
            if service_item in user_data['selected_services']:
                user_data['selected_services'].remove(service_item)
            else:
                user_data['selected_services'].append(service_item)
            
            drilling_cost = calculate_drilling_cost(user_data['district'], user_data['depth'])
            equipment_cost = sum(EQUIPMENT.get(item, 0) for item in user_data['selected_equipment'])
            services_cost = sum(SERVICES.get(item, 0) for item in user_data['selected_services'])
            
            telegram_api_request("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": f"üìè –ì–ª—É–±–∏–Ω–∞: *{user_data['depth']} –º*\n"
                       f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è: *{drilling_cost} —Ä—É–±.*\n"
                       f"üîß –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: *{equipment_cost} —Ä—É–±.*\n"
                       f"üõ† –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: *{services_cost} —Ä—É–±.*\n\n"
                       f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:",
                "parse_mode": "Markdown",
                "reply_markup": create_services_keyboard(user_data['selected_services'])
            })
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    elif callback_data == 'new_calculation':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'state': UserState.DISTRICT_SELECTION.value,
            'district': None,
            'depth': None,
            'selected_equipment': [],
            'selected_services': [],
            'timestamp': time.time()
        }
        
        telegram_api_request("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "üëã –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –±—É—Ä–µ–Ω–∏–µ:",
            "reply_markup": create_districts_keyboard()
        })
    
    return {"ok": True}

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–∞
            if self.path == "/api/simple-webhook" or self.path == "/simple-webhook":
                result = set_webhook()
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({
                    **result,
                    "system_info": {
                        "python_version": python_version,
                        "platform": platform.platform(),
                        "vercel_region": os.environ.get('VERCEL_REGION', 'unknown'),
                        "environment_variables": {
                            key: "available" if os.environ.get(key) else "missing" 
                            for key in ["TELEGRAM_BOT_TOKEN", "VERCEL_URL", "BOT_SERVICE_URL"]
                        }
                    }
                }, indent=2).encode('utf-8'))
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö GET –∑–∞–ø—Ä–æ—Å–æ–≤
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({
                    "status": "ok",
                    "message": "Simple webhook endpoint is running",
                    "python_version": python_version,
                    "path": self.path
                }).encode('utf-8'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GET –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                "status": "error",
                "error": str(e),
                "python_version": python_version
            }).encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update_json = json.loads(post_data.decode('utf-8'))
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å: {self.path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            result = process_update(update_json)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(result).encode('utf-8'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ POST: {e}", exc_info=True)
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                "status": "error",
                "error": str(e),
                "python_version": python_version
            }).encode('utf-8')) 