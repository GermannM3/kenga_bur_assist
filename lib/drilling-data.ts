// Реальные данные о глубинах бурения по районам Московской области
// и прайс-листы на основе предоставленного JSON

// Районы
const districts = [
  "Александровский район",
  "Балашихинский район",
  "Бронницы",
  "Видное",
  "Волоколамский район",
  "Воскресенский район",
  "Дмитровский район",
  "Домодедовский район",
  "Дубна",
  "Егорьевский район",
  "Железнодорожный",
  "Жуковский",
  "Зарайский район",
  "Звенигород",
  "Зеленоград",
  "Ивантеевка",
  "Истринский район",
  "Каширский район",
  "Климовск",
  "Клинский район",
  "Королёв",
  "Коломенский район",
  "Красногорский район",
  "Кубинка",
  "Ленинский район",
  "Лотошинский район",
  "Луховицкий район",
  "Люберецкий район",
  "Можайский район",
  "Мытищинский район",
  "Наро-Фоминский район",
  "Ногинский район",
  "Новая Москва",
  "Одинцовский район",
  "Озёрский район",
  "Орехово-Зуевский район",
  "Павлово-посадский район",
  "Подольский район",
  "Пушкинский район",
  "Раменский район",
  "Рублёво",
  "Рузский район",
  "Сергиево-Посадский район",
  "Серебряно-Прудский район",
  "Серпуховский район",
  "Солнечногорский район",
  "Ступинский район",
  "Талдомский район",
  "Химкинский район",
  "Чеховский район",
  "Шатурский район",
  "Шаховский район",
  "Щёлковский район",
  "Электросталь",
  "Электроугли",
]

// Глубины по районам (ПИ - песчаный известняк)
// Формат: [минимальная глубина, максимальная глубина]
// Если указано "нет", то значение null
const districtDepthRanges: Record<string, { pi1?: [number, number] | null; pi2?: [number, number] | null }> = {
  "Александровский район": { pi1: [40, 60], pi2: [60, 180] },
  "Балашихинский район": { pi1: [15, 40], pi2: [30, 160] },
  Бронницы: { pi1: null, pi2: [45, 65] },
  Видное: { pi1: [20, 30], pi2: [25, 120] },
  "Волоколамский район": { pi1: [30, 60], pi2: [35, 180] },
  "Воскресенский район": { pi1: null, pi2: [35, 100] },
  "Дмитровский район": { pi1: [30, 50], pi2: [70, 180] },
  "Домодедовский район": { pi1: null, pi2: [25, 90] },
  Дубна: { pi1: [25, 50], pi2: [70, 110] },
  "Егорьевский район": { pi1: null, pi2: [40, 100] },
  Железнодорожный: { pi1: null, pi2: [25, 70] },
  Жуковский: { pi1: null, pi2: [50, 85] },
  "Зарайский район": { pi1: null, pi2: [45, 110] },
  Звенигород: { pi1: [15, 30], pi2: [45, 120] },
  Зеленоград: { pi1: [30, 70], pi2: [90, 200] },
  Ивантеевка: { pi1: [15, 40], pi2: [45, 110] },
  "Истринский район": { pi1: [15, 40], pi2: [60, 180] },
  "Каширский район": { pi1: null, pi2: [40, 150] },
  Климовск: { pi1: null, pi2: [45, 75] },
  "Клинский район": { pi1: [30, 50], pi2: [70, 180] },
  Королёв: { pi1: null, pi2: [45, 70] },
  "Коломенский район": { pi1: null, pi2: [45, 90] },
  "Красногорский район": { pi1: null, pi2: [60, 120] },
  Кубинка: { pi1: null, pi2: [35, 120] },
  "Ленинский район": { pi1: [20, 30], pi2: [25, 120] },
  "Лотошинский район": { pi1: [25, 50], pi2: [45, 120] },
  "Луховицкий район": { pi1: [15, 30], pi2: [30, 100] },
  "Люберецкий район": { pi1: [10, 20], pi2: [25, 100] },
  "Можайский район": { pi1: [25, 50], pi2: [45, 130] },
  "Мытищинский район": { pi1: [15, 70], pi2: [50, 150] },
  "Наро-Фоминский район": { pi1: [15, 40], pi2: [25, 140] },
  "Ногинский район": { pi1: [15, 30], pi2: [20, 100] },
  "Новая Москва": { pi1: [15, 40], pi2: [20, 100] },
  "Одинцовский район": { pi1: [15, 50], pi2: [40, 160] },
  "Озёрский район": { pi1: null, pi2: null },
  "Орехово-Зуевский район": { pi1: null, pi2: [20, 90] },
  "Павлово-посадский район": { pi1: null, pi2: [20, 90] },
  "Подольский район": { pi1: [15, 40], pi2: [35, 100] },
  "Пушкинский район": { pi1: [15, 60], pi2: [45, 120] },
  "Раменский район": { pi1: [15, 30], pi2: [15, 120] },
  Рублёво: { pi1: [15, 40], pi2: [60, 110] },
  "Рузский район": { pi1: [15, 40], pi2: [20, 180] },
  "Сергиево-Посадский район": { pi1: [15, 40], pi2: [70, 250] },
  "Серебряно-Прудский район": { pi1: null, pi2: [50, 100] },
  "Серпуховский район": { pi1: null, pi2: [25, 130] },
  "Солнечногорский район": { pi1: [20, 45], pi2: [70, 220] },
  "Ступинский район": { pi1: null, pi2: [15, 100] },
  "Талдомский район": { pi1: [15, 50], pi2: [60, 130] },
  "Химкинский район": { pi1: [15, 40], pi2: [50, 120] },
  "Чеховский район": { pi1: null, pi2: [30, 100] },
  "Шатурский район": { pi1: null, pi2: null },
  "Шаховский район": { pi1: [15, 40], pi2: [50, 130] },
  "Щёлковский район": { pi1: [10, 30], pi2: [15, 90] },
  Электросталь: { pi1: null, pi2: [25, 60] },
  Электроугли: { pi1: null, pi2: [25, 60] },
}

// Преобразование диапазонов глубин в конкретные значения для выбора
function generateDepthsFromRange(range: [number, number] | null): number[] {
  if (!range) return []

  const [min, max] = range
  const step = 5 // Шаг в 5 метров
  const depths: number[] = []

  for (let depth = min; depth <= max; depth += step) {
    depths.push(depth)
  }

  return depths
}

// Реальные данные о стоимости бурения на основе предоставленного JSON
// Базовая стоимость бурения за метр
const baseDrillingCostPerMeter = 2900 // из JSON: "Бурение нПВХ Ø 125 мм (н)" - 2900 руб/м

// Стоимость бурения за метр по районам
// В реальном приложении эти данные могут варьироваться в зависимости от района
const drillingCostPerMeter: Record<string, number> = {}
districts.forEach((district) => {
  drillingCostPerMeter[district] = baseDrillingCostPerMeter
})

// Список оборудования и его стоимость на основе предоставленного JSON
const equipment: Record<string, number> = {
  // Насосное оборудование
  "Скважинный насос Belamos tf 80-110": 25000,
  "Насос Grundfos SQ 3-65": 45000,
  "Насос Grundfos SQE 3-65": 55000,
  "Насос Водолей БЦПЭ 0.5-50У": 15000,
  "Насос для принудительного выброса очищенной воды": 7500,

  // Кессоны и оголовки
  "Кессон пластиковый": 35000,
  "Кессон металлический": 75000,
  "Оголовок скважины": 3500,

  // Гидроаккумуляторы
  "Гидроаккумулятор 50 л": 6000,
  "Гидроаккумулятор 80 л нержавеющий": 8000,
  "Гидроаккумулятор 100 л": 12000,

  // Фильтры и автоматика
  "Фильтр грубой очистки": 3000,
  "Фильтр тонкой очистки": 5000,
  "Фильтр на песок": 12000,
  "Блок контроля и управления": 5000,
  "Система автоматики": 12000,
  "Реле давления": 800,
  Манометр: 600,
  "Обратный клапан": 3300,

  // Трубы и кабели
  "Труба PPR Ø32 (за метр)": 65,
  "Труба ПНД Ø32 (за метр)": 100,
  "Кабель 3*1.5 подводный (за метр)": 150,
  "Трос 3 мм (за метр)": 80,

  // Станции биологической очистки
  "Станция биологической очистки Итал БИО 5 пр.": 120000,
  "Колодец в три кольца с крышкой и установкой": 45000,
}

// Список услуг и их стоимость на основе предоставленного JSON
const services: Record<string, number> = {
  // Монтажные работы для скважины
  "Монтаж трубопровода, фитингов и кранов": 30,
  "Опуск насоса в скважину (за метр)": 50,
  "Монтаж кессона": 19000,
  "Монтаж систем автоматики": 2000,
  "Пуско-наладка систем": 2500,
  "Монтаж гидроаккумулятора": 2900,
  "Монтаж запорной арматуры": 2400,
  "Монтаж оголовка": 2200,
  "Монтаж кабеля (за метр)": 40,

  // Земляные работы
  "Копка под трубу (за м³)": 2000,
  "Земляные работы (за м³)": 2000,

  // Транспортные расходы
  "Транспортные расходы": 3000,
  "Доставка оборудования": 6000,

  // Дополнительные услуги
  "Стандартный монтаж станции биологической очистки": 19900,
  "Изготовление опалубки станции": 10000,
  "Установка колец ЖБ с крышкой люка": 15000,
  "Дополнительный метраж свыше указанных метров (за метр)": 2000,
  "Анализ воды": 5000,
  "Обслуживание на год": 25000,
}

// Получение списка районов
export function getDistricts(): string[] {
  return districts
}

// Получение глубин для выбранного района
export function getDepthsForDistrict(district: string): number[] {
  const ranges = districtDepthRanges[district]
  if (!ranges) return []

  // Объединяем глубины из обоих горизонтов (ПИ1 и ПИ2)
  const pi1Depths = generateDepthsFromRange(ranges.pi1 || null)
  const pi2Depths = generateDepthsFromRange(ranges.pi2 || null)

  // Объединяем и сортируем глубины
  return [...new Set([...pi1Depths, ...pi2Depths])].sort((a, b) => a - b)
}

// Получение списка оборудования
export function getEquipmentList(): string[] {
  return Object.keys(equipment)
}

// Получение списка услуг
export function getServicesList(): string[] {
  return Object.keys(services)
}

// Функция для расчета стоимости бурения
export function calculateDrillingCost(district: string, depth: number): number {
  // Базовая стоимость бурения
  const baseCost = depth * (drillingCostPerMeter[district] || baseDrillingCostPerMeter)

  // Добавляем стоимость фильтра на песок (если глубина больше 50 метров)
  const filterCost = depth > 50 ? 12000 : 0

  return baseCost + filterCost
}

// Расчет общей стоимости
export function calculateTotalCost(
  district: string,
  depth: number,
  selectedEquipment: string[],
  selectedServices: string[],
): number {
  // Стоимость бурения
  const drillingCost = calculateDrillingCost(district, depth)

  // Стоимость оборудования
  const equipmentCost = selectedEquipment.reduce((total, item) => {
    // Для позиций, которые считаются за метр, умножаем на глубину
    if (item.includes("за метр")) {
      const baseName = item.replace(" (за метр)", "")
      return total + (equipment[baseName] || 0) * depth
    }
    return total + (equipment[item] || 0)
  }, 0)

  // Стоимость услуг
  const servicesCost = selectedServices.reduce((total, item) => {
    // Для позиций, которые считаются за метр, умножаем на глубину
    if (item.includes("за метр")) {
      const baseName = item.replace(" (за метр)", "")
      return total + (services[baseName] || 0) * depth
    }
    return total + (services[item] || 0)
  }, 0)

  // Общая стоимость
  return drillingCost + equipmentCost + servicesCost
}

// Получение информации о горизонтах для района
export function getHorizonInfo(district: string): { pi1?: [number, number] | null; pi2?: [number, number] | null } {
  return districtDepthRanges[district] || { pi1: null, pi2: null }
}

// Функция для загрузки данных из PDF (заглушка)
// В реальном приложении здесь будет код для парсинга PDF
export async function loadDataFromPDF(pdfBuffer: Buffer): Promise<void> {
  console.log("Loading data from PDF...")
  // Здесь будет код для извлечения данных из PDF
}

